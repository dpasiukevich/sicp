(define (make-account balance pass)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (call-cops) (error "GOTCHA M8"))
  (define (password-protect password subject)
    (let ((wrong-pass-count 0))
      (lambda (user-pass m)
        (if (eq? user-pass password)
            (begin (set! wrong-pass-count 0)
                   (subject m))
            (cond ((< wrong-pass-count 1)
                   (set! wrong-pass-count (+ wrong-pass-count 1))
                   (error "Incorrect password"))
                  (else (call-cops)))))))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) (set! wrong-pass-count 0) deposit)
          ((eq? m 'make-joint)
           (lambda (new-pass) (password-protect new-pass dispatch)))
          (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  (password-protect pass dispatch))

(define (make-joint acc pass new-pass)
  ((acc pass 'make-joint) new-pass))

(define acc (make-account 100 'l))
((acc 'l 'withdraw) 105)
((acc 'l 'withdraw) 95)
(define paul-acc (make-joint acc 'l 'lul))
((paul-acc 'lul 'deposit) 15)
((acc 'l 'withdraw) 10)
((acc 'l1 'withdraw) 1)
((acc 'l1 'withdraw) 1)
((paul-acc 'l1 'withdraw) 1)
((paul-acc 'lul 'withdraw) 1)
((acc 'l 'withdraw) 1)
(define paul-acc-1 (make-joint paul-acc 'lul 'lul1))
((paul-acc-1 'lul1 'withdraw) 1)