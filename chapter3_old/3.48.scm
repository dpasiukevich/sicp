(load "parallel.scm")

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-mutex)
  (let ((cell (list false)))            
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
  the-mutex))

(define (clear! cell)
(set-car! cell false))

(define (test-and-set! cell)
(if (car cell)
    true
    (begin (set-car! cell true)
           false)))

(define (make-semaphore max)
  (define controller (make-mutex))
  (define current 1)
  (define mutex (make-mutex))
  (lambda (p)
    (define (semaphorized-p . args)
      (mutex 'acquire)
      (controller 'acquire)
      (set! current (+ current 1))
      (if (< current max) (mutex 'release))
      (controller 'release)
      (let ((val (apply p args)))
        (controller 'acquire)
        (set! current (- current 1))
        (controller 'release)
        val))
    semaphorized-p))

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer)))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))

(define (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'serializer) balance-serializer)
            (else (error "Unknown request -- MAKE-ACCOUNT"
  dispatch))