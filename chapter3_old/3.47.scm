(load "parallel.scm")

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-mutex)
  (let ((cell (list false)))            
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
  the-mutex))

(define (clear! cell)
(set-car! cell false))

(define (test-and-set! cell)
(if (car cell)
    true
    (begin (set-car! cell true)
           false)))

(define (make-semaphore max)
  (define controller (make-mutex))
  (define current 1)
  (define mutex (make-mutex))
  (lambda (p)
    (define (semaphorized-p . args)
      (mutex 'acquire)
      (controller 'acquire)
      (set! current (+ current 1))
      (if (< current max) (mutex 'release))
      (controller 'release)
      (let ((val (apply p args)))
        (controller 'acquire)
        (set! current (- current 1))
        (controller 'release)
        val))
    semaphorized-p))

(define (test i) (sleep-current-thread 2000) (display i))
;(parallel-execute (test 1) (test 2) (test 3) (test 4) (test 5))
(define s (make-semaphore 2))
(parallel-execute ((s test) 1) ((s test) 2) ((s test) 3) ((s test) 4) ((s test) 5))