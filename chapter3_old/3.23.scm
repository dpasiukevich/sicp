(define (make-deque)
  (define front-ptr '())
  (define rear-ptr '())
  (define (set-front-ptr! node) (set! front-ptr node))
  (define (set-rear-ptr! node) (set! rear-ptr node))
  (define (empty?) (or (null? front-ptr) (null? rear-ptr)))
  (define (init-with item)
    (define node (list item '() '()))
    (set-front-ptr! node)
    (set-rear-ptr! node)
    front-ptr)
  (define (front-insert-deque! item)
    (cond ((empty?) (init-with item))
          (else (let ((new-node (list item '() front-ptr)))
                  (list-set! front-ptr 1 new-node)
                  (set-front-ptr! new-node))))
    item)
  (define (rear-insert-deque! item)
    (cond ((empty?) (init-with item))
          (else (let ((new-pair (list item rear-ptr '())))
                  (list-set! rear-ptr 2 new-pair)
                  (set-rear-ptr! new-pair))))
    item)
  (define (front-delete-deque!)
    (cond ((empty?) (error "Empty deque -- FRONT-DELETE-DEQUE"))
          (else (let ((node-to-delete front-ptr))
                  (set-front-ptr! (caddr node-to-delete))
                  (if (not (null? front-ptr)) (list-set! front-ptr 1 '()))
                  (car node-to-delete)))))
  (define (rear-delete-deque!)
    (cond ((empty?) (error "Empty deque -- REAR-DELETE-DEQUE"))
          (else (let ((node-to-delete rear-ptr))
                  (set-rear-ptr! (cadr node-to-delete))
                  (if (not (null? rear-ptr)) (list-set! rear-ptr 2 '()))
                  (car node-to-delete)))))
  (define (print-deque)
    (define (print-iter cur)
      (if (not (null? cur))
          (begin (display (car cur))
                 (if (not (null? (caddr cur))) (display " "))
                 (print-iter (caddr cur)))))
    (newline)
    (cond ((empty?) 
           (display '()))
          (else (display "(")
                (print-iter front-ptr)
                (display ")"))))
  (define (dispatch m)
    (cond ((eq? m 'front-insert!) front-insert-deque!)
          ((eq? m 'rear-insert!) rear-insert-deque!)
          ((eq? m 'front-delete!) (front-delete-deque!))
          ((eq? m 'rear-delete!) (rear-delete-deque!))
          ((eq? m 'print) (print-deque))
          ((eq? m 'empty?) (empty?))
          (else (error "Unsupported message -- DEQUE:" m))))
  dispatch)

(define d (make-deque))
(d 'empty?)
((d 'front-insert!) 'a)
((d 'front-insert!) 'a1)
(d 'empty?)
((d 'rear-insert!) 'b)
(d 'print)
(d 'empty?)
(d 'rear-delete!)
(d 'rear-delete!)
(d 'rear-delete!)
(d 'empty?)
(d 'print)
