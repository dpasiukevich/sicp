(define (make-queue)
  (define front-ptr '())
  (define rear-ptr '())
  (define (set-front-ptr! value) (set! front-ptr value))
  (define (set-rear-ptr! value) (set! rear-ptr value))
  (define empty-queue? (lambda () (null? front-ptr)))
  (define (insert-queue! item)
    (define new-pair (cons item '()))
    (cond ((empty-queue?)
           (set-front-ptr! new-pair)
           (set-rear-ptr! new-pair)
           front-ptr)
          (else (set-cdr! rear-ptr new-pair)
                (set-rear-ptr! new-pair)
                front-ptr)))
  (define delete-queue! 
          (lambda ()
            (cond ((empty-queue?)
                   (error "Empty queue -- DELETE-QUEUE!" front-ptr))
                  (else (set-front-ptr! (cdr front-ptr)) front-ptr))))
  (define (dispatch m)
    (cond ((eq? m 'insert-queue!) insert-queue!)
          ((eq? m 'delete-queue!) (delete-queue!))
          (else (error "Operation is not supported" m))))
  dispatch)

(define q (make-queue))
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
(q 'delete-queue!)

