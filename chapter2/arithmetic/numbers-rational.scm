(load "numbers-real.scm")

(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (as-real x) (/ (numer x) (denom x)))
  (define (make-rat n d)
    (let ((g (gcd n d)))
     (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational)
       (lambda (x y) (= (* (denom x) (numer y)) (* (denom y) (numer x)))))
  (put '=zero? '(rational) (lambda (n) (= (denom n) 0)))
  (put 'raise-num '(rational) (lambda (n) (make-real (* 1.0 (/ (numer n) (denom n))))))
  (put 'project 'rational
       (lambda (x) (make-scheme-number (round (/ (numer x) (denom x)))))) 
  (put 'sin-num '(rational) (lambda (x) (make-real (sin (as-real x)))))
  (put 'cos-num '(rational) (lambda (x) (make-real (cos (as-real x)))))
  (put 'atan-num '(rational) (lambda (x) (make-real (atan (as-real x)))))
  (put 'square-num '(rational) (lambda (x) (tag (make-rat (square (numer x)) (square (denom x))))))
  (put 'sqrt-num '(rational) (lambda (x) (make-real (sqrt (as-real x)))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))

