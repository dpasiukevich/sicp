(define (tree-map func tree)
  (map (lambda (el) 
	 (if (pair? el)
	   (tree-map func el)
	   (func el))) tree))

(define (square-tree tree) (tree-map (lambda (x) (* x x)) tree))

(define (make-tree eq lt gt)
  (define tree '())
  (define (new-tree entry left right) (list entry left right))
  (define (entry tree) (car tree))
  (define (left-branch tree) (cadr tree))
  (define (right-branch tree) (caddr tree))
  (define (element-of-tree? el tree)
    (cond ((null? tree) #f)
          ((eq el (entry tree)) #t)
          ((lt el (entry tree)) (element-of-tree? el (left-branch tree)))
          ((gt el (entry tree)) (element-of-tree? el (right-branch tree)))))
  (define (insert el tree)
    (cond ((null? tree) (new-tree el '() '()))
          ((eq el (entry tree)) tree)
          ((lt el (entry tree))
           (new-tree (entry tree)
                     (insert el (left-branch tree))
                     (right-branch tree)))
          ((gt el (entry tree))
           (new-tree (entry tree)
                     (left-branch tree)
                     (insert el (right-branch tree))))))
  (define (dispatch m)
    (cond ((eq? m 'insert) (lambda (el) (set! tree (insert el tree))))
          ((eq? m 'null?) (null? tree))
          ((eq? m 'print) tree)
          (else (error "Operation is not supported -- TREE" m))))
  dispatch)
